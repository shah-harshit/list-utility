{"version":3,"file":"static/js/list-utility-page.fd15adc1.chunk.js","mappings":"mXAOaA,EAAkB,WAC3B,OAAkCC,EAAAA,EAAAA,UAAiB,IAAnD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAoCF,EAAAA,EAAAA,UAAiB,IAArD,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAkDJ,EAAAA,EAAAA,WAAkB,GAApE,eAAOK,EAAP,KAA0BC,EAA1B,KACA,GAAsDN,EAAAA,EAAAA,WAAkB,GAAxE,eAAOO,EAAP,KAA4BC,EAA5B,KACA,GAAwDR,EAAAA,EAAAA,WAAkB,GAA1E,eAAOS,EAAP,KAA6BC,EAA7B,KACA,GAA8CV,EAAAA,EAAAA,UAAsB,IAApE,eAAOW,EAAP,KAAwBC,EAAxB,KACA,GAA8CZ,EAAAA,EAAAA,UAAsB,IAApE,eAAOa,EAAP,KAAwBC,EAAxB,KACA,GAA0Cd,EAAAA,EAAAA,UAAiB,IAA3D,eAAOe,EAAP,KAAsBC,EAAtB,KACA,GAA0ChB,EAAAA,EAAAA,UAAiB,IAA3D,eAAOiB,EAAP,KAAsBC,EAAtB,KACA,IAAsClB,EAAAA,EAAAA,UAAwB,MAA9D,iBAAOmB,GAAP,MAAoBC,GAApB,MACA,IAAwCpB,EAAAA,EAAAA,WAAkB,GAA1D,iBAAOqB,GAAP,MAAqBC,GAArB,MAEMC,GAAe,SAACC,EAAkEC,GACpF,IAAMC,EAAQF,EAAMG,OAAOD,MAC3B,OAAQD,GACJ,IAAK,aACDvB,EAAawB,GACb,MACJ,IAAK,oBACDd,EAAmBgB,OAAOF,IAC1B,MACJ,IAAK,oBACDZ,EAAmBY,GACnB,MACJ,IAAK,iBACDV,EAAiBU,GACjB,MACJ,IAAK,iBACDR,EAAiBQ,GACjB,MACJ,QACI,SAoCNG,GAAkB,SAACJ,GACrB,OAAQA,GACJ,IAAK,UACDnB,GAAqB,SAACwB,GAAD,OAAWA,KAChC,MACJ,IAAK,YACGvB,GACAO,EAAmB,IAEvBF,EAAmBL,EAAsB,GAAK,GAC9CC,GAAuB,SAACuB,GAAD,OAAaA,KACpC,MACJ,IAAK,UACGtB,IACAO,EAAiB,IACjBE,EAAiB,KAErBR,GAAwB,SAACsB,GAAD,OAAcA,KACtC,MACJ,QACI,SASNC,GAAsB,WACxBX,IAAgB,IAGpB,OAAO,UAAC,KAAD,CACHY,WAAS,EACTC,MAAI,EACJC,cAAc,SACdC,QAAS,EACTC,OAAQ,EACRC,GAAI,GACJC,GAAI,GAPD,WASH,SAAC,KAAD,CAAML,MAAI,EAAV,UACI,SAAC,IAAD,CAAYM,QAAQ,KAApB,6BAEJ,SAAC,KAAD,CAAMN,MAAI,EAAV,UACI,SAAC,IAAD,CACIO,WAAS,EACTC,MAAM,aACNC,WAAS,EACTC,KAAM,GACNC,YAAY,eACZpB,MAAOzB,EACP8C,SAAU,SAACC,GAAD,OAAOzB,GAAayB,EAAG,eACjCC,WAAS,OAGjB,UAAC,KAAD,CAAMf,WAAS,EAACC,MAAI,EAACC,cAAc,SAASC,QAAS,EAArD,WACI,UAAC,KAAD,CAAMH,WAAS,EAACC,MAAI,EAACC,cAAc,SAASG,GAAI,GAAIC,GAAI,GAAxD,WACI,SAAC,IAAD,CACIG,MAAM,eACNO,SAAS,SAAC,IAAD,CAAUC,QAAS1C,EAAsBsC,SAAU,kBAAMlB,GAAgB,iBAEtF,UAAC,KAAD,CAAMK,WAAS,EAACC,MAAI,EAACE,QAAS,EAAGE,GAAI,GAAIC,GAAI,GAA7C,WACI,SAAC,KAAD,CAAML,MAAI,EAACiB,KAAM,EAAjB,UACI,SAAC,IAAD,CACIC,UAAW5C,EACXkC,MAAM,SACNG,YAAY,SACZpB,MAAOX,EACPgC,SAAU,SAACC,GAAD,OAAOzB,GAAayB,EAAG,wBAGzC,SAAC,KAAD,CAAMb,MAAI,EAACiB,KAAM,EAAjB,UACI,SAAC,IAAD,CACIC,UAAW5C,EACXkC,MAAM,SACNG,YAAY,SACZpB,MAAOT,EACP8B,SAAU,SAACC,GAAD,OAAOzB,GAAayB,EAAG,8BAKjD,UAAC,KAAD,CAAMd,WAAS,EAACC,MAAI,EAACC,cAAc,MAAMG,GAAI,GAAIC,GAAI,GAArD,WACI,SAAC,IAAD,CACIa,SAAUC,QAAQnC,KAAgC,eAAhBA,GAClCwB,MAAM,aACNO,SACI,SAAC,IAAD,CACIC,QAAyB,eAAhBhC,GACT4B,SAAU,kBAAM3B,IAAe,SAACmC,GAAD,OAAQA,EAAmB,GAAf,sBAIvD,SAAC,IAAD,CACIF,SAAUC,QAAQnC,KAAgC,UAAhBA,GAClCwB,MAAM,QACNO,SACI,SAAC,IAAD,CACIC,QAAyB,UAAhBhC,GACT4B,SAAU,kBAAM3B,IAAe,SAACmC,GAAD,OAAQA,EAAc,GAAV,iBAIvD,SAAC,IAAD,CACIF,SAAUC,QAAQnC,KAAgC,UAAhBA,GAClCwB,MAAM,QACNO,SACI,SAAC,IAAD,CACIC,QAAyB,UAAhBhC,GACT4B,SAAU,kBAAM3B,IAAe,SAACmC,GAAD,OAAQA,EAAc,GAAV,oBAK3D,SAAC,KAAD,CAAMrB,WAAS,EAACC,MAAI,EAACC,cAAc,SAASG,GAAI,GAAIC,GAAI,GAAxD,UACI,SAAC,IAAD,CACIG,MAAM,YACNO,SAAS,SAAC,IAAD,CAAUC,QAAS9C,EAAmB0C,SAAU,kBAAMlB,GAAgB,mBAGvF,UAAC,KAAD,CAAMK,WAAS,EAACC,MAAI,EAACC,cAAc,SAASG,GAAI,GAAIC,GAAI,GAAxD,WACI,SAAC,IAAD,CACIG,MAAM,cACNO,SAAS,SAAC,IAAD,CAAUC,QAAS5C,EAAqBwC,SAAU,kBAAMlB,GAAgB,mBAErF,UAAC,KAAD,CAAMK,WAAS,EAACC,MAAI,EAACE,QAAS,EAAGE,GAAI,GAAIC,GAAI,GAA7C,WACI,SAAC,KAAD,CAAML,MAAI,EAACiB,KAAM,EAAjB,UACI,SAAC,IAAD,CACIC,UAAW9C,EACXiD,KAAK,SACLb,MAAM,kBACNG,YAAY,kBACZpB,MAAOf,EACPoC,SAAU,SAACC,GAAD,OAAOzB,GAAayB,EAAG,2BAGzC,SAAC,KAAD,CAAMb,MAAI,EAACiB,KAAM,EAAjB,UACI,SAAC,IAAD,CACIC,UAAW9C,EACXoC,MAAM,SACNG,YAAY,QACZpB,MAAOb,EACPkC,SAAU,SAACC,GAAD,OAAOzB,GAAayB,EAAG,oCAOrD,SAAC,KAAD,CAAMb,MAAI,EAAV,UACI,SAAC,IAAD,CACIM,QAAQ,YACRgB,GAAI,CAAEC,MAAO,QAASC,YAAa,GACnCC,QA3LS,WACjB,IAAMC,EAAiB5D,EAAU6D,MAAM,MAAMC,KAAI,SAACC,GAAS,IAAD,IAChDC,EAAgBlD,EAAa,UAAGiD,EAAIF,MAAM/C,GAAe,UAA5B,aAAG,EAA6BmD,OAASF,EAAIE,OAC1EC,EAAgBlD,EAAa,UAAGgD,EAAcH,MAAM7C,GAAe,UAAtC,aAAG,EAAuCiD,OAASD,EAChFG,EAAe3D,GAAuB0D,GAA8BH,EAAIE,OAE9E,MAAoB,eAAhB/C,GACOkD,IAAUC,IAAQF,IACF,UAAhBjD,GACAoD,IAAQH,GACQ,UAAhBjD,GACAmD,IAAQF,GAERA,KAKXI,EAAcX,EAEdxD,IACAmE,EAAcX,EAAe/B,QAG7BvB,IACAiE,EAAcX,EAAeE,KAAI,SAACC,EAAaS,GAAd,gBAC1BA,EAAQ7C,OAAOjB,IADW,OACQE,GADR,OAC0BmD,OAG/D5D,EAAcoE,EAAYE,KAAK,QA2J3B,uBAOJ,SAAC,KAAD,CAAMvC,MAAI,EAAV,UACI,SAAC,IAAD,CACIO,WAAS,EACTE,WAAS,EACTlB,MAAOvB,EACP0C,KAAM,GACN8B,cACI,SAAC,IAAD,CAAgBC,SAAS,MAAzB,UACI,SAAC,IAAD,CACInB,GAAI,CAAEoB,IAAK,EAAGD,SAAU,WAAYE,MAAO,GAC3ClB,QAjJQ,WAC5BmB,OAAOC,UAAUC,UAAUC,UAAU/E,GACrCmB,IAAgB,IA6IA,UAII,SAAC,IAAD,aAMpB,SAAC,IAAD,CACI6D,KAAM9D,GACN+D,iBAAkB,IAClBC,QAASpD,GACTqD,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAJjD,UAMI,SAAC,IAAD,CAAOH,QAASpD,GAAqBwD,SAAS,UAAUhC,GAAI,CAAEiC,MAAO,QAArE","sources":["pages/list-utility/list-utility.tsx"],"sourcesContent":["import { Alert, Button, Checkbox, FormControlLabel, Grid, IconButton, InputAdornment, OutlinedInput, Snackbar, TextField, Typography } from \"@mui/material\"\nimport React, { useState } from \"react\"\nimport toLower from 'lodash/toLower';\nimport startCase from 'lodash/startCase';\nimport toUpper from 'lodash/toUpper';\nimport ContentCopyRoundedIcon from '@mui/icons-material/ContentCopyRounded';\n\nexport const ListUtilityPage = () => {\n    const [inputList, setInputList] = useState<string>('');\n    const [outputList, setOutputList] = useState<string>('');\n    const [isSortListEnabled, setIsSortListEnabled] = useState<boolean>(true);\n    const [isNumberListEnabled, setIsNumberListEnabled] = useState<boolean>(false);\n    const [isCleanupListEnabled, setIsCleanupListEnabled] = useState<boolean>(false);\n    const [listStartNumber, setListStartNumber] = useState<number | ''>('');\n    const [listStartSuffix, setListStartSuffix] = useState<string | ''>('');\n    const [cleanupPrefix, setCleanupPrefix] = useState<string>('');\n    const [cleanupSuffix, setCleanupSuffix] = useState<string>('');\n    const [convertCase, setConvertCase] = useState<string | null>(null);\n    const [showSnackbar, setShowSnackbar] = useState<boolean>(true);\n\n    const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>, component: string): void => {\n        const value = event.target.value;\n        switch (component) {\n            case 'input-list':\n                setInputList(value)\n                break;\n            case 'list-start-number':\n                setListStartNumber(Number(value))\n                break;\n            case 'list-start-suffix':\n                setListStartSuffix(value)\n                break;\n            case 'cleanup-prefix':\n                setCleanupPrefix(value);\n                break;\n            case 'cleanup-suffix':\n                setCleanupSuffix(value);\n                break;\n            default:\n                return;\n        }\n    }\n\n    const handleSubmit = () => {\n        const inputListArray = inputList.split('\\n').map((val) => {\n            const removedPrefix = cleanupPrefix ? val.split(cleanupPrefix)[1]?.trim() : val.trim();\n            const removedSuffix = cleanupSuffix ? removedPrefix.split(cleanupSuffix)[0]?.trim() : removedPrefix;\n            const cleanedValue = isCleanupListEnabled ? removedSuffix || val.trim() : val.trim();\n\n            if (convertCase === 'capitalize') {\n                return startCase(toLower(cleanedValue));\n            } else if (convertCase === 'upper') {\n                return toUpper(cleanedValue)\n            } else if (convertCase === 'lower') {\n                return toLower(cleanedValue)\n            } else {\n                return cleanedValue\n            }\n\n        });\n\n        let updatedList = inputListArray;\n\n        if (isSortListEnabled) {\n            updatedList = inputListArray.sort();\n        }\n\n        if (isNumberListEnabled) {\n            updatedList = inputListArray.map((val: string, index: number) =>\n                `${index + Number(listStartNumber)}${listStartSuffix}${val}`)\n        }\n\n        setOutputList(updatedList.join('\\n'));\n    }\n\n    const handleCheckList = (component: string): void => {\n        switch (component) {\n            case 'sorting':\n                setIsSortListEnabled((sort) => !sort);\n                break;\n            case 'numbering':\n                if (isNumberListEnabled) {\n                    setListStartSuffix('');\n                }\n                setListStartNumber(isNumberListEnabled ? '' : 1);\n                setIsNumberListEnabled((number) => !number);\n                break;\n            case 'cleanup':\n                if (isCleanupListEnabled) {\n                    setCleanupPrefix('');\n                    setCleanupSuffix('');\n                }\n                setIsCleanupListEnabled((cleanup) => !cleanup);\n                break;\n            default:\n                return;\n        }\n    }\n\n    const handleCopyButtonClicked = () => {\n        window.navigator.clipboard.writeText(outputList);\n        setShowSnackbar(true);\n    }\n\n    const handleSnackbarClose = () => {\n        setShowSnackbar(false);\n    }\n\n    return <Grid\n        container\n        item\n        flexDirection=\"column\"\n        spacing={2}\n        margin={1}\n        sm={11}\n        xs={11}\n    >\n        <Grid item>\n            <Typography variant=\"h4\">List utility</Typography>\n        </Grid>\n        <Grid item>\n            <TextField\n                fullWidth\n                label=\"Input list\"\n                multiline\n                rows={10}\n                placeholder=\"Enter a list\"\n                value={inputList}\n                onChange={(e) => handleChange(e, 'input-list')}\n                autoFocus\n            />\n        </Grid>\n        <Grid container item flexDirection=\"column\" spacing={1}>\n            <Grid container item flexDirection=\"column\" sm={12} xs={12}>\n                <FormControlLabel\n                    label=\"Cleanup list\"\n                    control={<Checkbox checked={isCleanupListEnabled} onChange={() => handleCheckList('cleanup')} />}\n                />\n                <Grid container item spacing={1} sm={12} xs={12}>\n                    <Grid item flex={1}>\n                        <TextField\n                            disabled={!isCleanupListEnabled}\n                            label=\"Prefix\"\n                            placeholder=\"Eg. 1)\"\n                            value={cleanupPrefix}\n                            onChange={(e) => handleChange(e, 'cleanup-prefix')}\n                        />\n                    </Grid>\n                    <Grid item flex={1}>\n                        <TextField\n                            disabled={!isCleanupListEnabled}\n                            label=\"Suffix\"\n                            placeholder=\"Eg. 's\"\n                            value={cleanupSuffix}\n                            onChange={(e) => handleChange(e, 'cleanup-suffix')}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid container item flexDirection=\"row\" sm={12} xs={12}>\n                <FormControlLabel\n                    disabled={Boolean(convertCase) && convertCase !== 'capitalize'}\n                    label=\"Capitalize\"\n                    control={\n                        <Checkbox\n                            checked={convertCase === 'capitalize'}\n                            onChange={() => setConvertCase((c) => !c ? 'capitalize' : '')}\n                        />\n                    }\n                />\n                <FormControlLabel\n                    disabled={Boolean(convertCase) && convertCase !== 'upper'}\n                    label=\"UPPER\"\n                    control={\n                        <Checkbox\n                            checked={convertCase === 'upper'}\n                            onChange={() => setConvertCase((c) => !c ? 'upper' : '')}\n                        />\n                    }\n                />\n                <FormControlLabel\n                    disabled={Boolean(convertCase) && convertCase !== 'lower'}\n                    label=\"lower\"\n                    control={\n                        <Checkbox\n                            checked={convertCase === 'lower'}\n                            onChange={() => setConvertCase((c) => !c ? 'lower' : '')}\n                        />\n                    }\n                />\n            </Grid>\n            <Grid container item flexDirection=\"column\" sm={12} xs={12}>\n                <FormControlLabel\n                    label=\"Sort list\"\n                    control={<Checkbox checked={isSortListEnabled} onChange={() => handleCheckList('sorting')} />}\n                />\n            </Grid>\n            <Grid container item flexDirection=\"column\" sm={12} xs={12}>\n                <FormControlLabel\n                    label=\"Number list\"\n                    control={<Checkbox checked={isNumberListEnabled} onChange={() => handleCheckList('numbering')} />}\n                />\n                <Grid container item spacing={1} sm={12} xs={12}>\n                    <Grid item flex={1}>\n                        <TextField\n                            disabled={!isNumberListEnabled}\n                            type=\"number\"\n                            label=\"Starting Number\"\n                            placeholder=\"Starting number\"\n                            value={listStartNumber}\n                            onChange={(e) => handleChange(e, 'list-start-number')}\n                        />\n                    </Grid>\n                    <Grid item flex={1}>\n                        <TextField\n                            disabled={!isNumberListEnabled}\n                            label=\"Suffix\"\n                            placeholder=\"Eg. )\"\n                            value={listStartSuffix}\n                            onChange={(e) => handleChange(e, 'list-start-suffix')}\n\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n        <Grid item>\n            <Button\n                variant=\"contained\"\n                sx={{ float: \"right\", marginRight: 2 }}\n                onClick={handleSubmit}>\n                Submit\n            </Button>\n        </Grid>\n        <Grid item>\n            <OutlinedInput\n                fullWidth\n                multiline\n                value={outputList}\n                rows={10}\n                endAdornment={\n                    <InputAdornment position=\"end\">\n                        <IconButton\n                            sx={{ top: 0, position: 'absolute', right: 0 }}\n                            onClick={handleCopyButtonClicked}\n                        >\n                            <ContentCopyRoundedIcon />\n                        </IconButton>\n                    </InputAdornment>\n                }\n            />\n        </Grid>\n        <Snackbar\n            open={showSnackbar}\n            autoHideDuration={3000}\n            onClose={handleSnackbarClose}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n            <Alert onClose={handleSnackbarClose} severity=\"success\" sx={{ width: '100%' }}>\n                Copied!\n            </Alert>\n        </Snackbar>\n    </Grid>\n}"],"names":["ListUtilityPage","useState","inputList","setInputList","outputList","setOutputList","isSortListEnabled","setIsSortListEnabled","isNumberListEnabled","setIsNumberListEnabled","isCleanupListEnabled","setIsCleanupListEnabled","listStartNumber","setListStartNumber","listStartSuffix","setListStartSuffix","cleanupPrefix","setCleanupPrefix","cleanupSuffix","setCleanupSuffix","convertCase","setConvertCase","showSnackbar","setShowSnackbar","handleChange","event","component","value","target","Number","handleCheckList","sort","number","cleanup","handleSnackbarClose","container","item","flexDirection","spacing","margin","sm","xs","variant","fullWidth","label","multiline","rows","placeholder","onChange","e","autoFocus","control","checked","flex","disabled","Boolean","c","type","sx","float","marginRight","onClick","inputListArray","split","map","val","removedPrefix","trim","removedSuffix","cleanedValue","startCase","toLower","toUpper","updatedList","index","join","endAdornment","position","top","right","window","navigator","clipboard","writeText","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","width"],"sourceRoot":""}